# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2016 PFN & NTT
# This file is distributed under the same license as the jubakit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: jubakit 0.5.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-02-03 22:56+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../source/architecture/dataset.rst:2
msgid "Dataset"
msgstr ""

#: ../../source/architecture/dataset.rst:4
msgid ""
"Dataset is an abstract representation of a sequence of data that "
"transforms records loaded from Loader into Jubatus Datum using data type "
"information defined in Schema. Dataset can be constructed from Loader and"
" Schema."
msgstr ""

#: ../../source/architecture/dataset.rst:16
msgid ""
"Some Services provides additional ways to construct Dataset. For example,"
" :py:class:`jubakit.classifier.Dataset` provides :py:func:`from_array "
"<jubakit.classifier.Dataset.from_array>` and :py:func:`from_matrix "
"<jubakit.classifier.Dataset.from_matrix>` which are convenient when using"
" datasets generated by scikit-learn. Other than noted, features mentioned"
" in this section are implemented in :py:class:`jubakit.base.BaseDataset`,"
" which is a base Dataset class for all Services."
msgstr ""

#: ../../source/architecture/dataset.rst:21
msgid "Static and Non-static Datasets"
msgstr ""

#: ../../source/architecture/dataset.rst:23
msgid ""
"By default, all records are loaded from Loader to memory when creating "
"Dataset instance. Such Datasets are called *Static Dataset*. If you want "
"to load records one by one from Loader, instead of loading everything "
"first, you can specify ``static`` option to create Dataset as *Non-static"
" Dataset*."
msgstr ""

#: ../../source/architecture/dataset.rst:31
msgid ""
"Note that some features like index-based record access cannot be used "
"over non-static Datasets."
msgstr ""

#: ../../source/architecture/dataset.rst:33
msgid ""
"Datasets constructed from infinite Loaders are non-static by default. You"
" cannot specify ``static=True`` when using infinite Loaders."
msgstr ""

#: ../../source/architecture/dataset.rst:37
msgid "Schema Prediction"
msgstr ""

#: ../../source/architecture/dataset.rst:39
msgid ""
"If you don't specify Schema class when constructing Dataset, the Schema "
"will automatically be predicted from the first record of the Dataset."
msgstr ""

#: ../../source/architecture/dataset.rst:47
msgid ""
"``types`` sections shows the predicted Schema. In the example above "
"``k1`` and ``k2`` columns are typed as ``STRING`` and ``NUMBER`` "
"respectively."
msgstr ""

#: ../../source/architecture/dataset.rst:51
msgid "Accessing Records"
msgstr ""

#: ../../source/architecture/dataset.rst:53
msgid ""
"You can access the raw record (i.e., record loaded from Loader) using "
"``get`` method."
msgstr ""

#: ../../source/architecture/dataset.rst:60
msgid ""
"You can access the transformed record (i.e., Datum) using index operator."
" You don't need this in most cases, though."
msgstr ""

#: ../../source/architecture/dataset.rst:70
msgid ""
"You can create a subset of Dataset using index operator with slice or "
"numeric array."
msgstr ""

#: ../../source/architecture/dataset.rst:80
msgid ""
"This allows you to use `cross-validation modules of scikit-learn <http"
"://scikit-learn.org/stable/modules/cross_validation.html>`_ easily. The "
"following code shows how to apply ``KFold`` on Dataset instance "
"``dataset``. This code creates two new Dataset instances called "
"``ds_train`` and ``ds_test``, which are both subset of ``dataset``."
msgstr ""

#: ../../source/architecture/dataset.rst:90
msgid ""
"Note that non-static Datasets cannot be random-accessed; they only allow "
"accessing the current raw record in the iteration by specifying the index"
" currently being iterated to ``get`` method."
msgstr ""

#: ../../source/architecture/dataset.rst:93
msgid "Transformation"
msgstr ""

#: ../../source/architecture/dataset.rst:95
msgid ""
"Static Datasets can be bulk transformed by a user-defined lambda function"
" using ``convert`` method."
msgstr ""

#: ../../source/architecture/dataset.rst:101
msgid ""
"The lambda function must take 1 argument, which is a list of raw records "
"to be processed. The lambda function must not modify the given list. The "
"result will become an another Dataset instance."
msgstr ""

#: ../../source/architecture/dataset.rst:105
msgid ""
"For convenience, Dataset class provides ``shuffle`` method, which "
"shuffles the order of records."
msgstr ""

#: ../../source/architecture/dataset.rst:108
msgid "Persisting Datasets"
msgstr ""

#: ../../source/architecture/dataset.rst:110
msgid ""
"You can use the standard ``pickle`` module to persist the Dataset "
"instance. Please note that pickled Dataset instances may not be able to "
"be unpickled in other versions of Jubakit."
msgstr ""

